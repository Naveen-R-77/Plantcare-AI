import { type NextRequest, NextResponse } from "next/server"
import { getDatabase } from "@/lib/mongodb"
import type { ChatMessage } from "@/lib/models"
import { ObjectId } from "mongodb"
import jwt from "jsonwebtoken"
import { GoogleGenerativeAI } from "@google/generative-ai"

export async function POST(request: NextRequest) {
  try {
    const token = request.headers.get("authorization")?.replace("Bearer ", "")
    if (!token) {
      console.error('тЭМ No authorization token provided');
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "fallback-secret") as any
    const userId = new ObjectId(decoded.userId)

    const { message, messageType, language } = await request.json()
    
    console.log('ЁЯдЦ Processing chat message:', {
      userId: userId.toString(),
      messageLength: message?.length,
      language: language,
      messageType: messageType
    });

    if (!message || message.trim().length === 0) {
      return NextResponse.json({ error: "Message cannot be empty" }, { status: 400 })
    }

    // Generate AI response using Gemini
    const aiResponse = await generateGeminiResponse(message, language || "en")
    
    console.log('тЬЕ Generated AI response:', aiResponse ? 'Success' : 'Failed');

    try {
      const db = await getDatabase()
      const chatMessages = db.collection<ChatMessage>("chat_messages")

      const newMessage: Omit<ChatMessage, "_id"> = {
        userId,
        message,
        response: aiResponse,
        timestamp: new Date(),
        messageType: messageType || "text",
        language: language || "en",
      }

      const result = await chatMessages.insertOne(newMessage)
      console.log('ЁЯТ╛ Saved to database:', result.insertedId);

      return NextResponse.json({
        success: true,
        message: "Chat message saved",
        response: aiResponse,
        messageId: result.insertedId,
      })
    } catch (dbError) {
      console.error('ЁЯТе Database error:', dbError);
      // Still return the AI response even if DB save fails
      return NextResponse.json({
        success: true,
        message: "Response generated (database temporarily unavailable)",
        response: aiResponse,
        messageId: null,
      })
    }
  } catch (error) {
    console.error("ЁЯТе Chat API error:", error)
    
    // Provide a helpful fallback response
    const fallbackResponse = "I'm experiencing some technical difficulties right now. Please try asking your question again, or contact support if the issue persists.";
    
    return NextResponse.json({ 
      success: false,
      error: "Internal server error",
      response: fallbackResponse,
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  try {
    const token = request.headers.get("authorization")?.replace("Bearer ", "")
    if (!token) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "fallback-secret") as any
    const userId = new ObjectId(decoded.userId)

    const db = await getDatabase()
    const chatMessages = db.collection<ChatMessage>("chat_messages")

    const userMessages = await chatMessages.find({ userId }).sort({ timestamp: -1 }).limit(100).toArray()

    return NextResponse.json({ messages: userMessages.reverse() })
  } catch (error) {
    console.error("Get chat messages error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

async function generateGeminiResponse(message: string, language: string): Promise<string> {
  try {
    console.log('ЁЯдЦ Generating Gemini response for language:', language);
    
    // Check if API key is available
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey || apiKey === 'demo' || apiKey === 'your-api-key-here') {
      console.warn('тЪая╕П No valid Gemini API key found, using fallback response');
      throw new Error('Gemini API key not configured');
    }

    // Initialize Gemini AI
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    // Create a specialized prompt for plant care
    const systemPrompt = language === "ta" 
      ? `роирпАроЩрпНроХро│рпН роТро░рпБ роиро┐рокрпБрогродрпНродрпБро╡роорпН ро╡ро╛ропрпНроирпНрод родро╛ро╡ро░ рокро░ро╛рооро░ро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН ро╡рпЗро│ро╛рогрпНроорпИ роЖро▓рпЛроЪроХро░рпН. родро╛ро╡ро░ роирпЛропрпНроХро│рпН, роЪро┐роХро┐роЪрпНроЪрпИ, ро╡ро│ро░рпНрокрпНрокрпБ роорпБро▒рпИроХро│рпН, роорогрпН рокро░ро╛рооро░ро┐рокрпНрокрпБ, роЙро░роорпН, рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ рооро▒рпНро▒рпБроорпН рокрпКродрпБро╡ро╛рой родро╛ро╡ро░ рокро░ро╛рооро░ро┐рокрпНрокрпБ рокро▒рпНро▒ро┐роп роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН. роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│рпН роироЯрпИроорпБро▒рпИ, роЕро▒ро┐ро╡ро┐ропро▓рпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН рооро▒рпНро▒рпБроорпН родрпЛроЯрпНроЯроХрпНроХро╛ро░ро░рпНроХро│рпБроХрпНроХрпБ рокропройрпБро│рпНро│родро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН. 

**рооро╛ро░рпНроХрпНроЯро╡рпБройрпН ро╡роЯро┐ро╡роорпИрокрпНрокрпБ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН:**
- роорпБроХрпНроХро┐роп родро▓рпИрокрпНрокрпБроХро│рпБроХрпНроХрпБ # роЕро▓рпНро▓родрпБ ## рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
- роорпБроХрпНроХро┐ропрооро╛рой роЪрпКро▒рпНроХро│рпИ **bold** роЖроХрпНроХро╡рпБроорпН
- рокроЯрпНроЯро┐ропро▓рпНроХро│рпБроХрпНроХрпБ - роЕро▓рпНро▓родрпБ 1. рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
- рокродрпНродро┐роХро│рпБроХрпНроХрпБ роЗроЯрпИропрпЗ ро╡рпЖро▒рпНро▒рпБ ро╡ро░ро┐роХро│рпН ро╡ро┐роЯро╡рпБроорпН`
      : `You are an expert plant care and agricultural advisor. Respond to questions about plant diseases, treatments, growing methods, soil care, fertilizers, pest control, and general plant care. Your responses should be practical, science-based, and helpful for farmers and gardeners.

**Markdown Formatting Guidelines:**
- Use # or ## for main headings and subheadings
- Make important terms and titles **bold**
- Use bullet points (-) or numbered lists (1.) for steps and tips
- Leave blank lines between paragraphs for better spacing
- Use **bold text** for key concepts, plant names, and important instructions
- Structure your response with clear sections and proper spacing
- Make titles and section headers stand out with bold formatting`;

    const prompt = `${systemPrompt}\n\nUser question: ${message}\n\nPlease provide a comprehensive, well-formatted response using proper markdown with clear headings, bold text for important terms, and good spacing between sections:`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    if (!text || text.trim().length === 0) {
      throw new Error('Empty response from Gemini API');
    }

    console.log('тЬЕ Gemini response generated successfully');
    return text;

  } catch (error) {
    console.error("ЁЯТе Gemini API error:", error);
    
    // Provide helpful fallback responses based on common plant care topics
    const fallbackResponses = {
      en: `## ЁЯМ▒ Plant Care Assistant

I'm currently experiencing some technical difficulties with the AI service, but I'm here to help with your plant care questions!

**Common Plant Care Topics I Can Help With:**
- **Plant Disease Identification** - Describe symptoms and I'll suggest treatments
- **Watering & Nutrition** - Proper watering schedules and fertilizer recommendations  
- **Pest Control** - Natural and chemical pest management solutions
- **Soil Health** - pH testing, soil amendments, and organic matter
- **Growing Tips** - Planting, pruning, and seasonal care advice

**Please try asking your question again, or contact our support team if the issue persists.**

*Tip: Be specific about your plant type, symptoms, and growing conditions for the best advice!*`,
      
      ta: `## ЁЯМ▒ родро╛ро╡ро░ рокро░ро╛рооро░ро┐рокрпНрокрпБ роЙродро╡ро┐ропро╛ро│ро░рпН

родро▒рпНрокрпЛродрпБ AI роЪрпЗро╡рпИропро┐ро▓рпН роЪро┐ро▓ родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роЪро┐роХрпНроХро▓рпНроХро│рпН роЙро│рпНро│рой, роЖройро╛ро▓рпН роЙроЩрпНроХро│рпН родро╛ро╡ро░ рокро░ро╛рооро░ро┐рокрпНрокрпБ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ роиро╛ройрпН роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН!

**роиро╛ройрпН роЙродро╡роХрпНроХрпВроЯро┐роп рокрпКродрпБро╡ро╛рой родро╛ро╡ро░ рокро░ро╛рооро░ро┐рокрпНрокрпБ родро▓рпИрокрпНрокрпБроХро│рпН:**
- **родро╛ро╡ро░ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН** - роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН роЪро┐роХро┐роЪрпНроЪрпИроХро│рпИ рокро░ро┐роирпНродрпБро░рпИрокрпНрокрпЗройрпН
- **роирпАро░рпНрокрпНрокро╛роЪройроорпН & роКроЯрпНроЯроЪрпНроЪродрпНродрпБ** - роЪро░ро┐ропро╛рой роирпАро░рпНрокрпНрокро╛роЪрой роЕроЯрпНроЯро╡рогрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЙро░ рокро░ро┐роирпНродрпБро░рпИроХро│рпН
- **рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ** - роЗропро▒рпНроХрпИ рооро▒рпНро▒рпБроорпН роЗро░роЪро╛ропрой рокрпВроЪрпНроЪро┐ роорпЗро▓ро╛рогрпНроорпИ родрпАро░рпНро╡рпБроХро│рпН
- **роорогрпН роЖро░рпЛроХрпНроХро┐ропроорпН ** - pH роЪрпЛродройрпИ, роорогрпН родро┐ро░рпБродрпНродроЩрпНроХро│рпН, рооро▒рпНро▒рпБроорпН роХро░ро┐роо рокрпКро░рпБроЯрпНроХро│рпН
- **ро╡ро│ро░рпНрокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН** - роироЯро╡рпБ, роХродрпНродро░ро┐рокрпНрокрпБ, рооро▒рпНро▒рпБроорпН рокро░рпБро╡роХро╛ро▓ рокро░ро╛рооро░ро┐рокрпНрокрпБ роЖро▓рпЛроЪройрпИ

**родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роорпАрогрпНроЯрпБроорпН роХрпЗроЯрпНроХро╡рпБроорпН, роЕро▓рпНро▓родрпБ роЪро┐роХрпНроХро▓рпН родрпКроЯро░рпНроирпНродро╛ро▓рпН роОроЩрпНроХро│рпН роЖродро░ро╡рпБ роХрпБро┤рпБро╡рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН.**

*роХрпБро▒ро┐рокрпНрокрпБ: роЪро┐ро▒роирпНрод роЖро▓рпЛроЪройрпИроХрпНроХро╛роХ роЙроЩрпНроХро│рпН родро╛ро╡ро░ ро╡роХрпИ, роЕро▒ро┐роХрпБро▒ро┐роХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро│ро░рпБроорпН роиро┐ро▓рпИроорпИроХро│рпИрокрпН рокро▒рпНро▒ро┐ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯрпБроХрпН роХрпВро▒ро╡рпБроорпН!*`
    };

    return fallbackResponses[language as keyof typeof fallbackResponses] || fallbackResponses.en;
  }
}

